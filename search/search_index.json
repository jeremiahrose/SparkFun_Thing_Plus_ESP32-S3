{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"arduino_example/","title":"Arduino Examples","text":"<p>Now that we've installed the espressif boards package in Arduino, it's time to upload our first sketch to make sure everything installed and is working properly. </p>"},{"location":"arduino_example/#thing-plus-esp32-s3-github-repository","title":"Thing Plus ESP32-S3 Github Repository","text":"<p>We've written a few example sketches for this specific board that live in the Github repository that we recommend taking a look at as they demonstrate some important hardware use cases. You can download it from the link above or you can get a ZIP of the library by clicking the button below:</p> <p> SparkFun Thing Plus - ESP32-S3 Github Repository (ZIP) </p> <p>esptool Upload Errors</p> <p>Some users may run into this upload error related to esptool:</p> <p>esptool.py v4.5.1 Serial port COM33 Connecting....</p> <p>A serial exception error occurred: Write timeout Note: This error originates from pySerial. It is likely not a problem with esptool, but with the hardware connection or drivers. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html the selected serial port For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html does not exist or your board is not connected</p> <p>This error means the board is not entering ROM bootloader mode automatically, causing the upload to hang and fail. We found this relates specifically to esptool.py v4.5.1 in the current stable release of the ESP32 Boards Package (2.0.11). Users can work around this error with one of the following three fixes: </p> <ol> <li>Use the alpha release (3.0.0 alpha3) of the ESP32 Boards Package. This release updates to esptool.py v4.6.</li> <li>Download the latest release of esptool.py from the GitHub repository releases and then manually replace it in the espressif boards package folder. </li> <li>If you want to keep using the current full release and encounter this error, force the board to enter the bootloader by holding the BOOT button down, clicking the RESET button, and then releasing the BOOT button.</li> </ol>"},{"location":"arduino_example/#board-settings","title":"Board Settings","text":"<p>As mentioned in the previous section, the Thing Plus ESP32-S3 is not currently included in the ESP32 Boards Package so we recommend selecting \"ESP32S3 Dev Module\" for your board with the following settings:</p> <ul> <li>USB Mode: Hardware CDC and JTAG</li> <li>USB CDC on Boot: Enabled</li> <li>Upload Mode: UART0 / Hardware CDC</li> <li>PSRAM: QSPI PSRAM</li> </ul> <p>This does require some manual definition/setup for pins in the code which the examples below demonstrate for some of the main peripheral components (Qwiic, \u00b5SD card, etc.). </p>"},{"location":"arduino_example/#rgb-led","title":"RGB LED","text":"<p>This example uses the FastLED library to cycle the RGB LED on the Thing Plus through a rainbow. Open the code from your downloaded copy of the GitHub repository or copy the code below into a blank sketch. Make sure the FastLED Library is installed, select the board (ESP32S3 Dev Module) and the Port, and click the \"Upload\" button.  </p> RGB LED Example <pre><code>/*\n  Control Addressable RGB LED\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This example shows how to illuminate the RGB on the SparkFun ESP32 S3 Thing Plus.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\n#include &lt;FastLED.h&gt; // http://librarymanager/All#FastLED\n\n#define LED_PIN     46 //Pin 46 on Thing Plus C S3 is connected to WS2812 LED\n#define COLOR_ORDER GRB\n#define CHIPSET     WS2812\n#define NUM_LEDS    1\n\n#define BRIGHTNESS  25\n\nCRGB leds[NUM_LEDS];\n\nvoid setup()\n{\n  Serial.begin(115200);\n  //while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  FastLED.addLeds&lt;CHIPSET, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);\n  FastLED.setBrightness(BRIGHTNESS);\n}\n\nvoid loop()\n{\n  leds[0] = CRGB::Red;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Green;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Blue;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Black;\n  FastLED.show();\n  delay(100);\n\n  leds[0] = CRGB::White;\n  FastLED.show();\n  delay(2000);\n\n  leds[0] = CRGB::Black;\n  FastLED.show();\n  delay(100);\n}\n</code></pre>"},{"location":"arduino_example/#i2c-scanner-power-control","title":"I<sup>2</sup>C Scanner Power Control","text":"<p>This example shows how to toggle the peripheral power voltage supply on and off as well as scan for any I<sup>2</sup>C devices connected to the I<sup>2</sup>C bus/Qwiic connector. After uploading, open the serial monitor with the baud set to 115200 and you should see a serial printout of the Fuel Gauge at 0x32 as well as any other devices connected to the Qwiic connector like the screenshot below shows. If you have a Qwiic board plugged in you should see the power LED on it blinking every second as the bus is powered on and off.</p> I2C Scanner Power Control Example <pre><code>/*\n  Enable Qwiic Power Control\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This shows how to control the power to the Qwiic connector. This example also shows the \n  Fuel Gauge IC at address 0x36.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\n#include &lt;Wire.h&gt;\n\nint pin_qwiicPower = 45; //Thing Plus S3 45 is connected to the v-reg that controls the Qwiic power\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  Serial.println(\"I2C Scanner\");\n\n  //By default the Qwiic power is on. But it can be controlled.\n  pinMode(pin_qwiicPower, OUTPUT);\n  digitalWrite(pin_qwiicPower, HIGH);\n\n  qwiicPowerOff();\n  delay(2000); //Power LED on a Qwiic board should now be off\n\n  qwiicPowerOn();\n\n  Wire.begin();\n}\n\nvoid loop()\n{\n  //Toggle the power on the Qwiic connector\n\n  Serial.println();\n  for (byte address = 1; address &lt; 127; address++ )\n  {\n    Wire.beginTransmission(address);\n    if (Wire.endTransmission() == 0)\n    {\n      Serial.print(\"Device found at address 0x\");\n      if (address &lt; 0x10)\n        Serial.print(\"0\");\n      Serial.println(address, HEX);\n    }\n  }\n  Serial.println(\"Done\");\n  delay(100);\n}\n\nvoid qwiicPowerOff()\n{\n  digitalWrite(pin_qwiicPower, LOW);\n}\n\nvoid qwiicPowerOn()\n{\n  digitalWrite(pin_qwiicPower, HIGH);\n}\n</code></pre> <p></p>"},{"location":"arduino_example/#sd-card-detect","title":"SD Card Detect","text":"<p>The SD Card Detect example is a simple example that monitors the card detect pin on the \u00b5SD card slot. As mentioned in the Hardware Overview section, the card detect switch is normally open and closed with a card inserted so the switch goes to VDD (3.3V). This requires us to set up an internal pull-down for card detection to work properly. </p> <p>After uploading, you can open the serial monitor with the baud set to 115200 and it should print out either \"Card Inserted\" or \"No SD Card\" depending on whether or not a \u00b5SD card is present.</p> SD Card Detect Example <pre><code>/*\n  Detecting if an SD Card is present\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  The socket detect switch is normally open, and closed when a card is inserted.\n  The switch is connected to VDD, so when a card is inserted, the switch is connected\n  to 3.3V. Therefore, we use an internal pull down.\n\n  This shows how to control the power to the Qwiic connector. This example also shows the \n  Fuel Gauge IC at address 0x36.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\nint pin_sdDetect = 48;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n  Serial.println(\"SDIO test\");\n\n  pinMode(pin_sdDetect, INPUT_PULLDOWN);\n}\n\nvoid loop()\n{\n  if (Serial.available()) ESP.restart();\n\n  if (digitalRead(pin_sdDetect) == HIGH)\n    Serial.println(\"Card inserted\");\n  else\n    Serial.println(\"No SD card\");\n\n  delay(500);\n}\n</code></pre>"},{"location":"arduino_example/#psram-test","title":"PSRAM Test","text":"<p>This example demonstrates how to enable and use PSRAM for RAM requests above a 1,000 byte threshold. The setup initializes PSRAM and prints out whether or not this was successful and then prints out available PSRAM space.</p> PSRAM Test Example <pre><code>/*\n  Enable PSRAM on the ESP32-S3\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This example shows how to enable PSRAM on ESP32-S3 modules that have it, and use it for\n  RAM requests above a certain byte threshold.\n\n  Note: Not all ESP32 modules have PSRAM built-in. The SparkFun ESP32-S3 uses the \n  ESP32-S3 Mini N8R2 with 8MB flash and 2MB PSRAM. \n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\nunsigned long lastHeapReport;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  if (psramInit() == false)\n    Serial.println(\"PSRAM failed to initialize\");\n  else\n    Serial.println(\"PSRAM initialized\");\n\n  Serial.printf(\"PSRAM Size available (bytes): %d\\r\\n\", ESP.getFreePsram());\n\n  heap_caps_malloc_extmem_enable(1000); //Use PSRAM for memory requests larger than 1,000 bytes\n}\n\nvoid loop()\n{\n  delay(20);\n\n  if (millis() - lastHeapReport &gt; 1000)\n  {\n    lastHeapReport = millis();\n    reportHeap();\n  }\n\n  if (Serial.available()) ESP.restart();\n}\n\nvoid reportHeap()\n{\n  Serial.printf(\"FreeHeap: %d / HeapLowestPoint: %d / LargestBlock: %d / Used PSRAM: %d\\r\\n\", ESP.getFreeHeap(),\n                xPortGetMinimumEverFreeHeapSize(), heap_caps_get_largest_free_block(MALLOC_CAP_8BIT), ESP.getPsramSize() - ESP.getFreePsram());\n}\n</code></pre>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>Now that we're familiar with the hardware on this Thing Plus board, it's time to connect it to our computer or battery power.</p>"},{"location":"hardware_assembly/#basic-usb-assembly","title":"Basic USB Assembly","text":"<p>Basic assembly of the Thing Plus ESP32-S3 only requires a USB-C cable connecting the board to a computer. Just plug the cable into the USB-C connector and move on to the Software Setup section. When powered up for the first time, the RGB LED on the \"top-right\" of the board should be cycling through a rainbow color similar to the video below:</p> <p></p> <p>Note</p> <p>Your computer may not recognize the board as a known USB device if you have not installed the espressif boards package in Arduino and/or installed the espressif IDF.</p>"},{"location":"hardware_assembly/#battery-assembly","title":"Battery Assembly","text":"<p>If you prefer a battery-powered application, plug a single-cell LiPo battery into the 2-pin JST connector on the underside of the board like the photo below. Remember, the MCP73831 only charges the battery when V_USB has voltage present either from the USB-C connector or through the V_USB PTH pin.</p> <p>For tips on the proper use of a LiPo battery and the 2-pin JST connector, please read through our Single Cell LiPo Battery Care tutorial.</p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer a traditional soldered assembly should solder wires or header pins to the PTH header on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the ESP32-S3 module and other hardware present on this Thing Plus board.</p>"},{"location":"hardware_overview/#esp32-s3-module","title":"ESP32-S3 Module","text":"<p>This Thing Plus uses the ESP32-S3-MINI1 wireless module from espressif. The ESP32-S3 is built around the extremely powerful Xtensa<sup>\u00ae</sup> dual-core 32-bit LX7 microprocessor with a wireless stack that supports 2.4 GHz WiFi and Bluetooth<sup>\u00ae</sup> 5 (LE) with an integrated PCB antenna.</p> <p></p> <p>The ESP32-S3-MINI1 offers an impressive peripheral features set including UART, I<sup>2</sup>C, I<sup>2</sup>S, SPI, LCD, Camera Interface, LED PWM, SDIO host, two-wire automotive interface (TWAI<sup>\u00ae</sup>) that is compatible with ISO 11898-1/CAN Spec 2.0 and more. This Thing Plus uses the ESP32-S3-MINI1-N4R2 which features 4MB Quad SPI Flash memory and 2MB of PSRAM (Pseudo-static RAM). The ESP32-S3 also has a full-speed USB 2.0 On-The-Go (OTG) interface for USB communication so it does not need any external UART-to-USB conversion.</p>"},{"location":"hardware_overview/#power-components","title":"Power Components","text":"<p>The Thing Plus ESP32-S3 includes several options for powering including USB-C, LiPo battery with on-board battery charging and monitoring circuits as well as direct power inputs.</p> <p></p>"},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary serial interface for the ESP32-S3 module as well as a power input. It connects directly to the ESP32-S3's USB serial converter. The 5V USB input voltage is regulated down to 3.3V through a voltage regulator with a max current of 500mA@3.3V.</p>"},{"location":"hardware_overview/#2-pin-jst-connector-battery-charger-fuel-gauge","title":"2-Pin JST Connector, Battery Charger, &amp; Fuel Gauge","text":"<p>The board has a 2-pin JST connector to connect a single-cell Lithium Ion (LiPo) battery for battery-powered applications. It also has an MCP73831 battery charger to charge an attached battery and a MAX17048 fuel gauge to monitor battery voltage levels. The charge rate is set to 214mA@3.3V. The MCP73831 receives power from the V_USB line so it only is powered when 5V is provided either over USB or the V_USB PTH pin. If applying voltage directly to the V_USB pin make sure it does not exceed 5.5V.</p> <p>The MAX17048's I<sup>2</sup>C lines are pulled up to 3.3V_P to allow for customizable power options. Read on below for more information about peripheral power.</p>"},{"location":"hardware_overview/#peripheral-power-control","title":"Peripheral Power Control","text":"<p>The board includes a second RT9080 3.3V regulator to control power to the peripheral 3.3V (3.3V_P) rail. This is powered on by default with some options for user control to help conserve power. The RT9080's EN (Enable) pin is tied to ESP45 so users can drive it LOW in their code to disable this line. It also is tied to the main 3.3V rail through the LP_CTL solder jumper so it defaults to powered on. If this solder jumper is opened, it defaults to off when the ESP32-S3 is power-cycled though users can drive the ESP45 pin HIGH in their code to enable the 3.3V_P rail.</p>"},{"location":"hardware_overview/#pinout-qwiic-connector","title":"Pinout &amp; Qwiic Connector","text":"<p>Thing Plus boards break out a large number of GPIO and interface pins to a pair of 0.1\"-spaced plated through-hole (PTH) headers and also has a Qwiic connector for easy integration into SparkFun's Qwiic ecosystem.</p> <p></p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector is tied to the ESP32-S3's I<sup>2</sup>C bus (IO8/SDA and IO9/SCL). The Qwiic connector provides connections for SDA, SCL, 3.3V, and Ground. Note, the Qwiic connector power and I<sup>2</sup>C pins are tied to 3.3V_P and are powered by default but if the peripheral power control circuit is adjusted as covered above, it will not function properly without enabling 3.3V_P through code.</p>"},{"location":"hardware_overview/#pth-headers","title":"PTH Headers","text":"<p>The Thing Plus's pair of PTH headers break out a selection of 21 GPIO pins from the ESP32-S3 along with PTH connections to USB voltage (5V), regulated 3.3V, battery voltage, ESP32 reset signal, and the voltage regulator Enable pin.</p> <p></p> <p>Nearly all of the GPIO pins can function in multiple configurations though some of them have more capabilities than others and some are limited to fewer functions. Pins labeled 10, 14, 15, 16, 17, and 18 are all analog capable and also work as capacitive touch inputs. The pins labeled for UART (RX/TX), I<sup>2</sup>C (SDA/SCL), and SPI (POCI, PICO, &amp; SCK) work primarily for their labeled functions but can be altered for other uses. Refer to the datasheet datasheet for complete information on the pin functionality.</p>"},{"location":"hardware_overview/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board has a \u00b5SD card slot that connects to the ESP32-S3's SDIO-4 pins. It is a fricton-fit connector so no \"clicking\" and \"unclicking\" is necessary. Just plug it in nice and snug. </p> <p></p> <p>We chose to connect the SD card to the SDIO interface instead of the dedicated SPI bus as we found it to be reliably faster for read/write speeds averaging roughly 2-3MB/s (read) and ~5-7MB/s (write) though speeds vary depending on the card used. One thing to note about this connector is the SD Card Detect pin is pulled to Ground (LOW) with no card present and shorts to 3.3V (HIGH) with a card inserted. Read on to the \"Arduino Examples\" section for an example of how to monitor and read this pin.</p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons on the board labeled RESET and BOOT. The RESET button is tied to the ESP32-S3's Enable (EN) pin and resets the module when pressed. The BOOT button puts the ESP32-S3 into bootloader mode when held down during power on or reset.</p> <p></p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>This Thing Plus has three standard LEDs labeled PWR, CHG, STAT, and a WS2812 RGB LED next to the ESP32-S3 module on the top of the board. The red Power (PWR) LED indicates whenever the 3.3V circuit is powered. The yellow Charge (CHG) LED indicates whenever the MCP73831 is charging a connected LiPo battery. The green Status (STAT) LED is tied to IO0. The WS2812 RGB LED connects the LED's Data In signal to IO46.</p> <p></p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"<p>The board has three solder jumpers labeled PWR, CHG, and LP_CTL. The PWR jumper completes the circuit for the Power LED and is CLOSED by default. Open it to disable the Power LED. The CHG jumper completes the circuit for the Charge LED and is CLOSED by default. Open the solder jumper to disable the Charge LED.</p> <p></p> <p>The LP_CTL jumper controls how the Low Power and Peripherals power works. It is CLOSED by default to pull the power the RT9080 3.3V regulator's enable pin HIGH to enable peripheral power on the 3.3V_P rail. When opened, the regulator's enable pin connects directly to ESP32 IO45 for users to control manually. Refer to \"Peripheral Power Control\" above for more information.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Thing Plus footprint and measures 2.30\" x 0.90\" (58.42mm x 22.86mm) with four mounting holes that fit a 4-40 screw though the top two mounting holes are slightly obstructed by the ESP32-S3 module so using those can be a bit troublesome.</p> <p></p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun Thing Plus - ESP32-S3 SKU: DEV-24408 <p> </p> <li> <p>The SparkFun Thing Plus - ESP32-S3 features the powerful and versatile ESP32-S3 from espressif<sup>\u2122</sup>. The ESP32-S3  It includes a LiPo battery charger and fuel gauge, \u00b5SD card slot, an addressable LED and more. The Thing Plus footprint breaks out all of the ESP32-S3's 23 GPIO pins to 0.1\"-spaced PTH headers. The board also has a USB-C connector for primary power and programming, 2-pin JST connector for a LiPo battery, and a Qwiic connector to integrate it into SparkFun's Qwiic ecosystem.</p> <p>The ESP32 WROOM-S3 is built around an Xtensa<sup>\u00ae</sup> 32-bit LX7 processor with massive processing power that operates at up to 240 MHz. It supports both 2.4 GHz WiFi and Bluetooth<sup>\u00ae</sup> 5 (LE) with a built-in PCB antenna. This version of the ESP32-S3 has 4MB Flash memory and 2MB of dynamic/PSRAM and the board also has a \u00b5SD card slot for those who need more storage space.</p> <p>The module has a host of peripherals that can be tied to nearly any GPIO pin including UART, I<sup>2</sup>C, SPI, LCD control, SDIO host, TWAI<sup>\u00ae</sup> controller (compatible with ISO 11898-1, i.e., CAN Specification 2.), and more. The ESP32-S3 can run two USB ports simultaneously and can act as a USB host.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need at least one USB-C cable to connect the Thing Plus to your computer: </p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Thing Plus - ESP32-C6 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"introduction/#optional-materials","title":"Optional Materials","text":"<p>The Thing Plus - ESP32-C6 includes a 2-pin JST connector and integrated charging circuit for an attached single-cell LiPo battery. Below are a few options we recommend for battery-powered applications:</p> <ul> <li> <p> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 2Ah PRT-13855 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 400mAh PRT-13851 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 850mAh PRT-13854 </p> <p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> SparkFun Qwiic Shield for Thing Plus Hookup Guide </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"print_view/","title":"Introduction","text":"<ul> <li> <p> SparkFun Thing Plus - ESP32-S3 SKU: DEV-24408 <p> </p> <li> <p>The SparkFun Thing Plus - ESP32-S3 features the powerful and versatile ESP32-S3 from espressif<sup>\u2122</sup>. The ESP32-S3  It includes a LiPo battery charger and fuel gauge, \u00b5SD card slot, an addressable LED and more. The Thing Plus footprint breaks out all of the ESP32-S3's 23 GPIO pins to 0.1\"-spaced PTH headers. The board also has a USB-C connector for primary power and programming, 2-pin JST connector for a LiPo battery, and a Qwiic connector to integrate it into SparkFun's Qwiic ecosystem.</p> <p>The ESP32 WROOM-S3 is built around an Xtensa<sup>\u00ae</sup> 32-bit LX7 processor with massive processing power that operates at up to 240 MHz. It supports both 2.4 GHz WiFi and Bluetooth<sup>\u00ae</sup> 5 (LE) with a built-in PCB antenna. This version of the ESP32-S3 has 4MB Flash memory and 2MB of dynamic/PSRAM and the board also has a \u00b5SD card slot for those who need more storage space.</p> <p>The module has a host of peripherals that can be tied to nearly any GPIO pin including UART, I<sup>2</sup>C, SPI, LCD control, SDIO host, TWAI<sup>\u00ae</sup> controller (compatible with ISO 11898-1, i.e., CAN Specification 2.), and more. The ESP32-S3 can run two USB ports simultaneously and can act as a USB host.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"print_view/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need at least one USB-C cable to connect the Thing Plus to your computer: </p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Thing Plus - ESP32-C6 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"print_view/#optional-materials","title":"Optional Materials","text":"<p>The Thing Plus - ESP32-C6 includes a 2-pin JST connector and integrated charging circuit for an attached single-cell LiPo battery. Below are a few options we recommend for battery-powered applications:</p> <ul> <li> <p> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 2Ah PRT-13855 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 400mAh PRT-13851 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 850mAh PRT-13854 </p> <p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"print_view/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> SparkFun Qwiic Shield for Thing Plus Hookup Guide </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"print_view/#hardware-overview","title":"Hardware Overview","text":"<p>Let's take a closer look at the ESP32-S3 module and other hardware present on this Thing Plus board.</p>"},{"location":"print_view/#esp32-s3-module","title":"ESP32-S3 Module","text":"<p>This Thing Plus uses the ESP32-S3-MINI1 wireless module from espressif. The ESP32-S3 is built around the extremely powerful Xtensa<sup>\u00ae</sup> dual-core 32-bit LX7 microprocessor with a wireless stack that supports 2.4 GHz WiFi and Bluetooth<sup>\u00ae</sup> 5 (LE) with an integrated PCB antenna.</p> <p></p> <p>The ESP32-S3-MINI1 offers an impressive peripheral features set including UART, I<sup>2</sup>C, I<sup>2</sup>S, SPI, LCD, Camera Interface, LED PWM, SDIO host, two-wire automotive interface (TWAI<sup>\u00ae</sup>) that is compatible with ISO 11898-1/CAN Spec 2.0 and more. This Thing Plus uses the ESP32-S3-MINI1-N4R2 which features 4MB Quad SPI Flash memory and 2MB of PSRAM (Pseudo-static RAM). The ESP32-S3 also has a full-speed USB 2.0 On-The-Go (OTG) interface for USB communication so it does not need any external UART-to-USB conversion.</p>"},{"location":"print_view/#power-components","title":"Power Components","text":"<p>The Thing Plus ESP32-S3 includes several options for powering including USB-C, LiPo battery with on-board battery charging and monitoring circuits as well as direct power inputs.</p> <p></p>"},{"location":"print_view/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary serial interface for the ESP32-S3 module as well as a power input. It connects directly to the ESP32-S3's USB serial converter. The 5V USB input voltage is regulated down to 3.3V through a voltage regulator with a max current of 500mA@3.3V.</p>"},{"location":"print_view/#2-pin-jst-connector-battery-charger-fuel-gauge","title":"2-Pin JST Connector, Battery Charger, &amp; Fuel Gauge","text":"<p>The board has a 2-pin JST connector to connect a single-cell Lithium Ion (LiPo) battery for battery-powered applications. It also has an MCP73831 battery charger to charge an attached battery and a MAX17048 fuel gauge to monitor battery voltage levels. The charge rate is set to 214mA@3.3V. The MCP73831 receives power from the V_USB line so it only is powered when 5V is provided either over USB or the V_USB PTH pin. If applying voltage directly to the V_USB pin make sure it does not exceed 5.5V.</p> <p>The MAX17048's I<sup>2</sup>C lines are pulled up to 3.3V_P to allow for customizable power options. Read on below for more information about peripheral power.</p>"},{"location":"print_view/#peripheral-power-control","title":"Peripheral Power Control","text":"<p>The board includes a second RT9080 3.3V regulator to control power to the peripheral 3.3V (3.3V_P) rail. This is powered on by default with some options for user control to help conserve power. The RT9080's EN (Enable) pin is tied to ESP45 so users can drive it LOW in their code to disable this line. It also is tied to the main 3.3V rail through the LP_CTL solder jumper so it defaults to powered on. If this solder jumper is opened, it defaults to off when the ESP32-S3 is power-cycled though users can drive the ESP45 pin HIGH in their code to enable the 3.3V_P rail.</p>"},{"location":"print_view/#pinout-qwiic-connector","title":"Pinout &amp; Qwiic Connector","text":"<p>Thing Plus boards break out a large number of GPIO and interface pins to a pair of 0.1\"-spaced plated through-hole (PTH) headers and also has a Qwiic connector for easy integration into SparkFun's Qwiic ecosystem.</p> <p></p>"},{"location":"print_view/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector is tied to the ESP32-S3's I<sup>2</sup>C bus (IO8/SDA and IO9/SCL). The Qwiic connector provides connections for SDA, SCL, 3.3V, and Ground. Note, the Qwiic connector power and I<sup>2</sup>C pins are tied to 3.3V_P and are powered by default but if the peripheral power control circuit is adjusted as covered above, it will not function properly without enabling 3.3V_P through code.</p>"},{"location":"print_view/#pth-headers","title":"PTH Headers","text":"<p>The Thing Plus's pair of PTH headers break out a selection of 21 GPIO pins from the ESP32-S3 along with PTH connections to USB voltage (5V), regulated 3.3V, battery voltage, ESP32 reset signal, and the voltage regulator Enable pin.</p> <p></p> <p>Nearly all of the GPIO pins can function in multiple configurations though some of them have more capabilities than others and some are limited to fewer functions. Pins labeled 10, 14, 15, 16, 17, and 18 are all analog capable and also work as capacitive touch inputs. The pins labeled for UART (RX/TX), I<sup>2</sup>C (SDA/SCL), and SPI (POCI, PICO, &amp; SCK) work primarily for their labeled functions but can be altered for other uses. Refer to the datasheet datasheet for complete information on the pin functionality.</p>"},{"location":"print_view/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board has a \u00b5SD card slot that connects to the ESP32-S3's SDIO-4 pins. It is a fricton-fit connector so no \"clicking\" and \"unclicking\" is necessary. Just plug it in nice and snug. </p> <p></p> <p>We chose to connect the SD card to the SDIO interface instead of the dedicated SPI bus as we found it to be reliably faster for read/write speeds averaging roughly 2-3MB/s (read) and ~5-7MB/s (write) though speeds vary depending on the card used. One thing to note about this connector is the SD Card Detect pin is pulled to Ground (LOW) with no card present and shorts to 3.3V (HIGH) with a card inserted. Read on to the \"Arduino Examples\" section for an example of how to monitor and read this pin.</p>"},{"location":"print_view/#buttons","title":"Buttons","text":"<p>There are two buttons on the board labeled RESET and BOOT. The RESET button is tied to the ESP32-S3's Enable (EN) pin and resets the module when pressed. The BOOT button puts the ESP32-S3 into bootloader mode when held down during power on or reset.</p> <p></p>"},{"location":"print_view/#leds","title":"LEDs","text":"<p>This Thing Plus has three standard LEDs labeled PWR, CHG, STAT, and a WS2812 RGB LED next to the ESP32-S3 module on the top of the board. The red Power (PWR) LED indicates whenever the 3.3V circuit is powered. The yellow Charge (CHG) LED indicates whenever the MCP73831 is charging a connected LiPo battery. The green Status (STAT) LED is tied to IO0. The WS2812 RGB LED connects the LED's Data In signal to IO46.</p> <p></p>"},{"location":"print_view/#solder-jumpers","title":"Solder Jumpers","text":"<p>The board has three solder jumpers labeled PWR, CHG, and LP_CTL. The PWR jumper completes the circuit for the Power LED and is CLOSED by default. Open it to disable the Power LED. The CHG jumper completes the circuit for the Charge LED and is CLOSED by default. Open the solder jumper to disable the Charge LED.</p> <p></p> <p>The LP_CTL jumper controls how the Low Power and Peripherals power works. It is CLOSED by default to pull the power the RT9080 3.3V regulator's enable pin HIGH to enable peripheral power on the 3.3V_P rail. When opened, the regulator's enable pin connects directly to ESP32 IO45 for users to control manually. Refer to \"Peripheral Power Control\" above for more information.</p>"},{"location":"print_view/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Thing Plus footprint and measures 2.30\" x 0.90\" (58.42mm x 22.86mm) with four mounting holes that fit a 4-40 screw though the top two mounting holes are slightly obstructed by the ESP32-S3 module so using those can be a bit troublesome.</p> <p></p>"},{"location":"print_view/#hardware-assembly","title":"Hardware Assembly","text":"<p>Now that we're familiar with the hardware on this Thing Plus board, it's time to connect it to our computer or battery power.</p>"},{"location":"print_view/#basic-usb-assembly","title":"Basic USB Assembly","text":"<p>Basic assembly of the Thing Plus ESP32-S3 only requires a USB-C cable connecting the board to a computer. Just plug the cable into the USB-C connector and move on to the Software Setup section. When powered up for the first time, the RGB LED on the \"top-right\" of the board should be cycling through a rainbow color similar to the video below:</p> <p></p> <p>Note</p> <p>Your computer may not recognize the board as a known USB device if you have not installed the espressif boards package in Arduino and/or installed the espressif IDF.</p>"},{"location":"print_view/#battery-assembly","title":"Battery Assembly","text":"<p>If you prefer a battery-powered application, plug a single-cell LiPo battery into the 2-pin JST connector on the underside of the board like the photo below. Remember, the MCP73831 only charges the battery when V_USB has voltage present either from the USB-C connector or through the V_USB PTH pin.</p> <p>For tips on the proper use of a LiPo battery and the 2-pin JST connector, please read through our Single Cell LiPo Battery Care tutorial.</p>"},{"location":"print_view/#soldered-assembly","title":"Soldered Assembly","text":"<p>Those who prefer a traditional soldered assembly should solder wires or header pins to the PTH header on the side of the board. If you're not familiar with through-hole soldering or would like a refresher, take a look at our Through-Hole Soldering Tutorial:</p> <ul> <li> How to Solder: Through-Hole Soldering </li> </ul>"},{"location":"print_view/#software-setup","title":"Software Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>With the ESP32-S3 Thing Plus connected to our computer, it's time to set up the boards package in Arduino.</p>"},{"location":"print_view/#installing-espressif-arduino-boards","title":"Installing espressif Arduino Boards","text":"<p>To install the ESP32 boards package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://espressif.github.io/arduino-esp32/package_esp32_dev_index.json </code></p> <p>Click \"Ok\" and then open the Boards Manager tool, search for \"espressif ESP32\" and install the latest alpha release (3.0.0-alpha2 or later). This install process may take some time so feel free to step away while it downloads and installs.</p>"},{"location":"print_view/#optional-arduino-libraries","title":"Optional Arduino Libraries","text":"<p>Most of the examples we cover in the next section use existing libraries included with the ESP32 Arduino core but the RGB LED example uses the FastLED library so you'll need it installed to follow along with that example. Navigate to the \"Libraries\" menu on the left side of the screen, search for \"FastLED\", and install the latest version. If you prefer to manually install the library, you can download a ZIP of the library by clicking the button below:</p> <p> FastLED Arduino Library </p>"},{"location":"print_view/#espressif-idf","title":"espressif IDF","text":"<p>Users who prefer to use espressif's development toolkit, espressif IDF, can get started by following their instructions here and  ESP32-S3 specific documentation here. </p>"},{"location":"print_view/#arduino-examples","title":"Arduino Examples","text":""},{"location":"print_view/#icon-simplearduino","title":"icon: simple/arduino","text":"<p>Now that we've installed the espressif boards package in Arduino, it's time to upload our first sketch to make sure everything installed and is working properly. </p>"},{"location":"print_view/#thing-plus-esp32-s3-github-repository","title":"Thing Plus ESP32-S3 Github Repository","text":"<p>We've written a few example sketches for this specific board that live in the Github repository that we recommend taking a look at as they demonstrate some important hardware use cases. You can download it from the link above or you can get a ZIP of the library by clicking the button below:</p> <p> SparkFun Thing Plus - ESP32-S3 Github Repository (ZIP) </p> <p>esptool Upload Errors</p> <p>Some users may run into this upload error related to esptool:</p> <p>esptool.py v4.5.1 Serial port COM33 Connecting....</p> <p>A serial exception error occurred: Write timeout Note: This error originates from pySerial. It is likely not a problem with esptool, but with the hardware connection or drivers. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html the selected serial port For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html does not exist or your board is not connected</p> <p>This error means the board is not entering ROM bootloader mode automatically, causing the upload to hang and fail. We found this relates specifically to esptool.py v4.5.1 in the current stable release of the ESP32 Boards Package (2.0.11). Users can work around this error with one of the following three fixes: </p> <ol> <li>Use the alpha release (3.0.0 alpha3) of the ESP32 Boards Package. This release updates to esptool.py v4.6.</li> <li>Download the latest release of esptool.py from the GitHub repository releases and then manually replace it in the espressif boards package folder. </li> <li>If you want to keep using the current full release and encounter this error, force the board to enter the bootloader by holding the BOOT button down, clicking the RESET button, and then releasing the BOOT button.</li> </ol>"},{"location":"print_view/#board-settings","title":"Board Settings","text":"<p>As mentioned in the previous section, the Thing Plus ESP32-S3 is not currently included in the ESP32 Boards Package so we recommend selecting \"ESP32S3 Dev Module\" for your board with the following settings:</p> <ul> <li>USB Mode: Hardware CDC and JTAG</li> <li>USB CDC on Boot: Enabled</li> <li>Upload Mode: UART0 / Hardware CDC</li> <li>PSRAM: QSPI PSRAM</li> </ul> <p>This does require some manual definition/setup for pins in the code which the examples below demonstrate for some of the main peripheral components (Qwiic, \u00b5SD card, etc.). </p>"},{"location":"print_view/#rgb-led","title":"RGB LED","text":"<p>This example uses the FastLED library to cycle the RGB LED on the Thing Plus through a rainbow. Open the code from your downloaded copy of the GitHub repository or copy the code below into a blank sketch. Make sure the FastLED Library is installed, select the board (ESP32S3 Dev Module) and the Port, and click the \"Upload\" button.  </p> RGB LED Example <pre><code>/*\n  Control Addressable RGB LED\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This example shows how to illuminate the RGB on the SparkFun ESP32 S3 Thing Plus.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\n#include &lt;FastLED.h&gt; // http://librarymanager/All#FastLED\n\n#define LED_PIN     46 //Pin 46 on Thing Plus C S3 is connected to WS2812 LED\n#define COLOR_ORDER GRB\n#define CHIPSET     WS2812\n#define NUM_LEDS    1\n\n#define BRIGHTNESS  25\n\nCRGB leds[NUM_LEDS];\n\nvoid setup()\n{\n  Serial.begin(115200);\n  //while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  FastLED.addLeds&lt;CHIPSET, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);\n  FastLED.setBrightness(BRIGHTNESS);\n}\n\nvoid loop()\n{\n  leds[0] = CRGB::Red;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Green;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Blue;\n  FastLED.show();\n  delay(200);\n\n  leds[0] = CRGB::Black;\n  FastLED.show();\n  delay(100);\n\n  leds[0] = CRGB::White;\n  FastLED.show();\n  delay(2000);\n\n  leds[0] = CRGB::Black;\n  FastLED.show();\n  delay(100);\n}\n</code></pre>"},{"location":"print_view/#i2c-scanner-power-control","title":"I<sup>2</sup>C Scanner Power Control","text":"<p>This example shows how to toggle the peripheral power voltage supply on and off as well as scan for any I<sup>2</sup>C devices connected to the I<sup>2</sup>C bus/Qwiic connector. After uploading, open the serial monitor with the baud set to 115200 and you should see a serial printout of the Fuel Gauge at 0x32 as well as any other devices connected to the Qwiic connector like the screenshot below shows. If you have a Qwiic board plugged in you should see the power LED on it blinking every second as the bus is powered on and off.</p> I2C Scanner Power Control Example <pre><code>/*\n  Enable Qwiic Power Control\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This shows how to control the power to the Qwiic connector. This example also shows the \n  Fuel Gauge IC at address 0x36.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\n#include &lt;Wire.h&gt;\n\nint pin_qwiicPower = 45; //Thing Plus S3 45 is connected to the v-reg that controls the Qwiic power\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  Serial.println(\"I2C Scanner\");\n\n  //By default the Qwiic power is on. But it can be controlled.\n  pinMode(pin_qwiicPower, OUTPUT);\n  digitalWrite(pin_qwiicPower, HIGH);\n\n  qwiicPowerOff();\n  delay(2000); //Power LED on a Qwiic board should now be off\n\n  qwiicPowerOn();\n\n  Wire.begin();\n}\n\nvoid loop()\n{\n  //Toggle the power on the Qwiic connector\n\n  Serial.println();\n  for (byte address = 1; address &lt; 127; address++ )\n  {\n    Wire.beginTransmission(address);\n    if (Wire.endTransmission() == 0)\n    {\n      Serial.print(\"Device found at address 0x\");\n      if (address &lt; 0x10)\n        Serial.print(\"0\");\n      Serial.println(address, HEX);\n    }\n  }\n  Serial.println(\"Done\");\n  delay(100);\n}\n\nvoid qwiicPowerOff()\n{\n  digitalWrite(pin_qwiicPower, LOW);\n}\n\nvoid qwiicPowerOn()\n{\n  digitalWrite(pin_qwiicPower, HIGH);\n}\n</code></pre> <p></p>"},{"location":"print_view/#sd-card-detect","title":"SD Card Detect","text":"<p>The SD Card Detect example is a simple example that monitors the card detect pin on the \u00b5SD card slot. As mentioned in the Hardware Overview section, the card detect switch is normally open and closed with a card inserted so the switch goes to VDD (3.3V). This requires us to set up an internal pull-down for card detection to work properly. </p> <p>After uploading, you can open the serial monitor with the baud set to 115200 and it should print out either \"Card Inserted\" or \"No SD Card\" depending on whether or not a \u00b5SD card is present.</p> SD Card Detect Example <pre><code>/*\n  Detecting if an SD Card is present\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  The socket detect switch is normally open, and closed when a card is inserted.\n  The switch is connected to VDD, so when a card is inserted, the switch is connected\n  to 3.3V. Therefore, we use an internal pull down.\n\n  This shows how to control the power to the Qwiic connector. This example also shows the \n  Fuel Gauge IC at address 0x36.\n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\nint pin_sdDetect = 48;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n  Serial.println(\"SDIO test\");\n\n  pinMode(pin_sdDetect, INPUT_PULLDOWN);\n}\n\nvoid loop()\n{\n  if (Serial.available()) ESP.restart();\n\n  if (digitalRead(pin_sdDetect) == HIGH)\n    Serial.println(\"Card inserted\");\n  else\n    Serial.println(\"No SD card\");\n\n  delay(500);\n}\n</code></pre>"},{"location":"print_view/#psram-test","title":"PSRAM Test","text":"<p>This example demonstrates how to enable and use PSRAM for RAM requests above a 1,000 byte threshold. The setup initializes PSRAM and prints out whether or not this was successful and then prints out available PSRAM space.</p> PSRAM Test Example <pre><code>/*\n  Enable PSRAM on the ESP32-S3\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: January 13, 2024\n  License: MIT. Please see LICENSE.md for more information.\n\n  This example shows how to enable PSRAM on ESP32-S3 modules that have it, and use it for\n  RAM requests above a certain byte threshold.\n\n  Note: Not all ESP32 modules have PSRAM built-in. The SparkFun ESP32-S3 uses the \n  ESP32-S3 Mini N8R2 with 8MB flash and 2MB PSRAM. \n\n  Feel like supporting open source hardware?\n  Buy a board from SparkFun!\n  SparkFun ESP32-S3 Thing Plus (DEV-24408) https://www.sparkfun.com/products/24408\n\n  Select the following in the Arduino IDE:\n  Board: ESP32S3 Dev Module\n  USB Mode: Hardware CDC and JTAG\n  USB CDC on Boot: Enabled\n  Upload Mode: UART0 / Hardware CDC\n  PSRAM: QSPI PSRAM\n  Port: Select the COM port that the device shows up on under device manager\n*/\n\nunsigned long lastHeapReport;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (Serial == false); //Wait for serial monitor to connect before printing anything\n\n  if (psramInit() == false)\n    Serial.println(\"PSRAM failed to initialize\");\n  else\n    Serial.println(\"PSRAM initialized\");\n\n  Serial.printf(\"PSRAM Size available (bytes): %d\\r\\n\", ESP.getFreePsram());\n\n  heap_caps_malloc_extmem_enable(1000); //Use PSRAM for memory requests larger than 1,000 bytes\n}\n\nvoid loop()\n{\n  delay(20);\n\n  if (millis() - lastHeapReport &gt; 1000)\n  {\n    lastHeapReport = millis();\n    reportHeap();\n  }\n\n  if (Serial.available()) ESP.restart();\n}\n\nvoid reportHeap()\n{\n  Serial.printf(\"FreeHeap: %d / HeapLowestPoint: %d / LargestBlock: %d / Used PSRAM: %d\\r\\n\", ESP.getFreeHeap(),\n                xPortGetMinimumEverFreeHeapSize(), heap_caps_get_largest_free_block(MALLOC_CAP_8BIT), ESP.getPsramSize() - ESP.getFreePsram());\n}\n</code></pre>"},{"location":"print_view/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>esptool.py v4.5.1 Serial port COM33 Connecting....</p> <p>A serial exception error occurred: Write timeout Note: This error originates from pySerial. It is likely not a problem with esptool, but with the hardware connection or drivers. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html the selected serial port For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html does not exist or your board is not connected</p> <p>This error means the board is not entering ROM bootloader mode automatically, causing the upload to hang and fail. We found this relates specifically to esptool.py v4.5.1 in the current stable release of the ESP32 Boards Package (2.0.11). Users can work around this error with one of the following three fixes: </p> <ol> <li>Use the alpha release (3.0.0 alpha3) of the ESP32 Boards Package. This release updates to esptool.py v4.6.</li> <li>Download the latest release of esptool.py from the GitHub repository releases and then manually replace it in the espressif boards package folder. </li> <li>If you want to keep using the current full release and encounter this error, force the board to enter the bootloader by holding the BOOT button down, clicking the RESET button, and then releasing the BOOT button.</li> </ol>"},{"location":"print_view/#digital-reset","title":"Digital Reset","text":"<p>Some users may run into an issue when uploading completes where the board does not digitally reset properly. If you notice your code is not running after upload finishes, just press the RESET button on the board and it should start running.</p>"},{"location":"print_view/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"print_view/#resources","title":"Resources:","text":"<p>For more information about the Thing Plus - ESP32-S3, check out the resources below:</p> <ul> <li>Schematic</li> <li>KiCad Board Files</li> <li>Board Dimensions</li> <li>Datasheet (ESP32-S3-MINI1)</li> <li>GitHub Repository</li> <li>Thing Plus Info Page</li> <li>Qwiic Info Page</li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more information about the Thing Plus - ESP32-S3, check out the resources below:</p> <ul> <li>Schematic</li> <li>KiCad Board Files</li> <li>Board Dimensions</li> <li>Datasheet (ESP32-S3-MINI1)</li> <li>GitHub Repository</li> <li>Thing Plus Info Page</li> <li>Qwiic Info Page</li> </ul>"},{"location":"software_setup/","title":"Arduino Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p> <p>With the ESP32-S3 Thing Plus connected to our computer, it's time to set up the boards package in Arduino.</p>"},{"location":"software_setup/#installing-espressif-arduino-boards","title":"Installing espressif Arduino Boards","text":"<p>To install the ESP32 boards package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://espressif.github.io/arduino-esp32/package_esp32_dev_index.json </code></p> <p>Click \"Ok\" and then open the Boards Manager tool, search for \"espressif ESP32\" and install the latest alpha release (3.0.0-alpha2 or later). This install process may take some time so feel free to step away while it downloads and installs.</p>"},{"location":"software_setup/#optional-arduino-libraries","title":"Optional Arduino Libraries","text":"<p>Most of the examples we cover in the next section use existing libraries included with the ESP32 Arduino core but the RGB LED example uses the FastLED library so you'll need it installed to follow along with that example. Navigate to the \"Libraries\" menu on the left side of the screen, search for \"FastLED\", and install the latest version. If you prefer to manually install the library, you can download a ZIP of the library by clicking the button below:</p> <p> FastLED Arduino Library </p>"},{"location":"software_setup/#espressif-idf","title":"espressif IDF","text":"<p>Users who prefer to use espressif's development toolkit, espressif IDF, can get started by following their instructions here and  ESP32-S3 specific documentation here. </p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#esptool-upload-error","title":"esptool Upload Error","text":"<p>Some users may run into this upload error related to esptool:</p> <p>esptool.py v4.5.1 Serial port COM33 Connecting....</p> <p>A serial exception error occurred: Write timeout Note: This error originates from pySerial. It is likely not a problem with esptool, but with the hardware connection or drivers. For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html the selected serial port For troubleshooting steps visit: https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html does not exist or your board is not connected</p> <p>This error means the board is not entering ROM bootloader mode automatically, causing the upload to hang and fail. We found this relates specifically to esptool.py v4.5.1 in the current stable release of the ESP32 Boards Package (2.0.11). Users can work around this error with one of the following three fixes: </p> <ol> <li>Use the alpha release (3.0.0 alpha3) of the ESP32 Boards Package. This release updates to esptool.py v4.6.</li> <li>Download the latest release of esptool.py from the GitHub repository releases and then manually replace it in the espressif boards package folder. </li> <li>If you want to keep using the current full release and encounter this error, force the board to enter the bootloader by holding the BOOT button down, clicking the RESET button, and then releasing the BOOT button.</li> </ol>"},{"location":"troubleshooting/#digital-reset","title":"Digital Reset","text":"<p>Some users may run into an issue when uploading completes where the board does not digitally reset properly. If you notice your code is not running after upload finishes, just press the RESET button on the board and it should start running.</p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/contribute/","title":"Help Improve the Experience!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#enhance-our-documentation","title":"Enhance our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - ESP32-S3 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#upgrade-our-hardware-design","title":"Upgrade our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - ESP32-S3 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design modifications</li> <li> <p>File a pull request with your changes, and enjoy making the world a better place.</p> <ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested upgrades, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision.</li> </ul> <p>Note</p> <p>Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.</p> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to those who have contributed to this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - ESP32-S3 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - ESP32-S3 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"}]}